package com.marchinelearning.project;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class InfoGainCalculator {
	static int ngramCountInData = 0;
	static int numFamilies = 9;
	static int[] familyOccurrences;
	static int[] exampleCurrentIndex;

	static String[] top500Ngrams;
	static double[] top500InfoGain;
	static HashMap<Integer, List<String>> familyTrainingMap;
	static HashMap<String, Scanner> trainingFilesMap;

	static PriorityBlockingQueue<NgramEntity> infoGainHeap = new PriorityBlockingQueue<>();
	
	
	private InfoGainCalculator() {
	}

	public static void calcFamilyOccurrences() {
		familyTrainingMap = new HashMap<Integer, List<String>>();
		familyOccurrences = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		trainingFilesMap = new HashMap<String, Scanner>();

		Scanner in;
		try {
			in = new Scanner(new File(Constants.trainLabelsFilename));
			in.nextLine();

			while (in.hasNext()) {
				String[] lineParts = in.nextLine().split(",");
				int familyNbr = Integer.parseInt(lineParts[1]) - 1;
				String malwareId = lineParts[0].replace("\"", "");

				familyOccurrences[familyNbr]++;

				if (!familyTrainingMap.containsKey(familyNbr)) {
					familyTrainingMap.put(familyNbr, new ArrayList<String>());
				}

				File file = new File(Constants.NgramTrainingExamplesPath() + malwareId + Constants.ngramsTrainingExampleSuffix);

				if (file.exists()) {
					familyTrainingMap.get(familyNbr).add(malwareId);
					trainingFilesMap.put(malwareId, new Scanner(file));
				}
			}

			in.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void calcInfoGain() throws Exception {
		
		 long start = System.currentTimeMillis();



		int totalData = 0;
		for (int familyCount : familyOccurrences) {
			totalData += familyCount;
		}
		
		 int totalTrainingData = totalData;

		// 1541 + 2478 + 2942 + 475 + 42 + 751 + 398 + 1228 + 1013;
		exampleCurrentIndex = new int[totalTrainingData];


		 Scanner completeNgramsListFile;


		try {
			completeNgramsListFile = new Scanner(new File(Constants.ngramsListFilename));
			completeNgramsListFile.nextLine();
			int ngramIndex = 0;
			while (completeNgramsListFile.hasNext()) {
			//while ( String line = completeNgramsListFile.nextLine() != null) {
				/*new Thread(new Runnable() {
						@Override
		               public void run () {
		         */      
		           
				//ngramIndex++;

				String ngram = completeNgramsListFile.nextLine();

				double infoGain = 0;
			
				 double[] PC = new double[numFamilies];
				 double[] PV0C = new double[numFamilies];
				 double[] PV1C = new double[numFamilies];

				for (int i = 0; i < numFamilies; i++) {
					 int ngramCountInFamily = countNgramInFamily(ngram, i);

					PV1C[i] = (double) ngramCountInFamily / (double) familyOccurrences[i];
					PV0C[i] = 1.0 - PV1C[i];
					PC[i] = (double) familyOccurrences[i] / (double) totalTrainingData;

					ngramCountInData += ngramCountInFamily;
				}

				 double PV1 = (double) ngramCountInData / (double) totalTrainingData;
				 double PV0 = 1.0 - PV1;

				for (int i = 0; i < numFamilies; i++) {
					if (PV0 != 0) {
						infoGain += PV0C[i] * (Math.log(PV0C[i] / (PV0 * PC[i])) / Math.log(2));
					}

					if (PV1 != 0) {
						infoGain += PV1C[i] * (Math.log(PV1C[i] / (PV1 * PC[i])) / Math.log(2));
					}
				}

				NgramEntity entity = new NgramEntity(ngram, infoGain);
				
				if (infoGainHeap.size() >= 500 && entity.infoGain > infoGainHeap.peek().infoGain) {
					try {
						infoGainHeap.take();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				infoGainHeap.add(entity);
				
				//System.out.println(ngramIndex);

				
				if (ngramIndex % 1000 == 0) 
					System.out.println((ngramIndex++) + " : "+ (System.currentTimeMillis() - start) + " ms");
		    
				
		               
		
			}

			completeNgramsListFile.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
			
	}

	public static int countNgramInFamily(String ngram, int familyNbr)  {
		List<String> malwaresInFamily = familyTrainingMap.get(familyNbr);
		int ngramCountInFamily = 0;

		Scanner ngramsListFile;

		String ngramIterator;
		String line;

		for (String malwareId : malwaresInFamily) {
			ngramsListFile = trainingFilesMap.get(malwareId);
			ngramIterator = "";

			while (ngramIterator.compareTo(ngram) < 0 && ngramsListFile.hasNext()) {
				line = ngramsListFile.nextLine();
				ngramIterator = line.substring(0, 11).replace(" ", "");

				if (ngramIterator.equals(ngram)) {
					ngramCountInFamily++;
				}
			}

			// ngramsListFile.close();
		}

		return ngramCountInFamily;
	}

	public static void processNgramInfoGain(String ngram, double infoGain) {
		double minInfoGain = top500InfoGain[0];
		int minInfoGainIndex = 0;

		for (int i = 1; i < 500; i++) {
			if (minInfoGain > top500InfoGain[i]) {
				minInfoGain = top500InfoGain[i];
				minInfoGainIndex = i;
			}
		}

		if (minInfoGain < infoGain) {
			top500InfoGain[minInfoGainIndex] = infoGain;
			top500Ngrams[minInfoGainIndex] = ngram;
		}
	}

	public static void generateTop500NgramsFile() {
		try {
			PrintWriter writer = new PrintWriter(Constants.Path() + "top500NGrams.txt");
			for (NgramEntity entity : infoGainHeap) {
				writer.println(entity.ngramId);
			}

			writer.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private static class NgramEntity implements Comparable<NgramEntity> {
		String ngramId;
		double infoGain;
		
		public NgramEntity(String ngramId, double infoGain) {
			this.ngramId = ngramId;
			this.infoGain = infoGain;
		}
		
		@Override
		public int compareTo(NgramEntity other) {
			return Double.compare(this.infoGain, other.infoGain);
		}
	}

	public static void main(String[] args) throws Exception {
		// MergeNgrams.run();

		calcFamilyOccurrences();

		calcInfoGain();

		generateTop500NgramsFile();

	}
}
