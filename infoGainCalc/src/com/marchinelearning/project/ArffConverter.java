package com.marchinelearning.project;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

public class ArffConverter {
	
	private ArffConverter() { }
	
	private static Set<String> buildLabelSet() {
		Set<String> labelSet = new HashSet<String>();
		for (int i = 1; i <= 9; i++) {
			labelSet.add(String.valueOf(i));
		}
		return labelSet;
	}
	
	private static LinkedHashMap<String, Integer> buildMasterAttrMap(String attrPath) {
		LinkedHashMap<String, Integer> attrMap = new LinkedHashMap<String, Integer>();
		try (BufferedReader br = new BufferedReader(new FileReader(attrPath))) {
			int idx = 0; 
			String attr;
			while ((attr = br.readLine()) != null) {
				attrMap.put(parseNGram(attr), idx++);
			}
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("Error: buildAttrMap()");
		}
		return attrMap;
	}
	
	private static String[] getInputFileList(String inputDir) {
		File inputDirectory = new File(inputDir);
		return inputDirectory.list();
	}
	
	private static String parseNGram(String line) {
		String[] arr = line.split(" ");
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < 4; i++) {
			sb.append(arr[i]);
		}
		return sb.toString();
 	}
	
	private static ArrayList<Integer> createAttrListForFile(LinkedHashMap<String, Integer> attrMap, Set<String> labelSet, String inputFile) {
		ArrayList<Integer> attrList = new ArrayList<>();
		try (BufferedReader br = new BufferedReader(new FileReader(inputFile))) {
			String attr;
			while ((attr = br.readLine()) != null) {
				Integer attrIndex = attrMap.get(parseNGram(attr));
				if (attrIndex != null) {
					attrList.add(attrIndex);
				}
				else {
					if (labelSet.contains(attr))
						attrList.add(Integer.valueOf(attr));
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("Error: createAttrList()");
		}
		return attrList;
	}
	
	private static String attrListToString(ArrayList<Integer> attrList) {
		StringBuilder sb = new StringBuilder();
		sb.append("{");
		String label = String.valueOf(attrList.remove(attrList.size() - 1));
		for (int i = 0; i < attrList.size(); i++) {
			sb.append(attrList.get(i)).append(" 1, ");
		}
		sb.append(attrList.size()).append(" ").append(label).append("}");
		return sb.toString();
	}
	
	private static void printArffMetaData(LinkedHashMap<String, Integer> attrMap, PrintWriter pw) {
		pw.println("@RELATION malware\n");
		
		for (Map.Entry<String, Integer> entry : attrMap.entrySet()) {
			pw.println("@ATTRIBUTE "+entry.getKey()+"  NUMERIC");
		}
		pw.println("@ATTRIBUTE family {1,2,3,4,5,6,7,8,9}\n");
		pw.println("\n@DATA");
	}
	
	/**
	 * Creates the corresponding sparse-format ARFF file given:
	 * 	- a list of "master" attributes
	 *  - a directory containing files with a list of attributes for each malware instance
	 *  - the name of the file to write the ARFF output to
	 * @param masterAttrList
	 * @param inputDir
	 * @param outputArff
	 */
	public static void run(String masterAttrList, String inputDir, String outputArff) {
		PrintWriter pw = null;
		try {
			pw = new PrintWriter(outputArff, "UTF-8");
			LinkedHashMap<String, Integer> attrMap = buildMasterAttrMap(masterAttrList);
			Set<String> labelSet = buildLabelSet();
			
			printArffMetaData(attrMap, pw);
			
			for (String file : getInputFileList(inputDir)) {
				ArrayList<Integer> attrList = createAttrListForFile(attrMap, labelSet, inputDir+file);
				String arffRow = attrListToString(attrList);
				pw.println(arffRow);
			}
			
		} catch (FileNotFoundException | UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		finally {
			if (pw != null)
				pw.close();
		}
	}

	
	/*
	public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
		String masterAttrList = "/home/patrrand/machine-learning/malware-classification/train-attr-list.txt";
		String inputDir = "/home/patrrand/machine-learning/malware-classification/output/";
		String outputArff = "/home/patrrand/machine-learning/malware-classification/malware.arff";
		
		ArffConverter.run(masterAttrList, inputDir, outputArff);

	}
	*/
}
