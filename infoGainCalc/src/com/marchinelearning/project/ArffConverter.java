package com.marchinelearning.project;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

public class ArffConverter {
	private LinkedHashMap<String, Integer> attrMap;
	private String asmDirPath;
	private String outFilePath;
	private Set<String> labelSet;
	
	public ArffConverter(String attrPath, String asmDirPath, String outFilePath) {
		this.asmDirPath = asmDirPath;
		this.outFilePath = outFilePath;
		buildLabelSet();
		buildAttrMap(attrPath);
	}
	
	private void buildLabelSet() {
		labelSet = new HashSet<String>();
		for (int i = 1; i <= 9; i++) {
			labelSet.add(String.valueOf(i));
		}
	}
	
	private void buildAttrMap(String attrPath) {
		attrMap = new LinkedHashMap<String, Integer>();
		try (BufferedReader br = new BufferedReader(new FileReader(attrPath))) {
			int idx = 0; 
			String attr;
			while ((attr = br.readLine()) != null) {
				//if (attr.length() > 1 && !attr.contains("\""))
				attrMap.put(attr, idx++);
			}
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("Error: buildAttrMap()");
		}
	}
	
	private String[] getAsmFileList() {
		File asmDir = new File(asmDirPath);
		return asmDir.list();
	}
	
	private ArrayList<Integer> createAttrList(String asmFile) {
		ArrayList<Integer> attrList = new ArrayList<>();
		try (BufferedReader br = new BufferedReader(new FileReader(asmFile))) {
			String attr;
			while ((attr = br.readLine()) != null) {
				Integer attrIndex = attrMap.get(attr);
				if (attrIndex != null) {
					attrList.add(attrIndex);
				}
				else {
					if (labelSet.contains(attr))
						attrList.add(Integer.valueOf(attr));
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("Error: createAttrList()");
		}
		return attrList;
	}
	
	private String attrListToString(ArrayList<Integer> attrList) {
		StringBuilder sb = new StringBuilder();
		sb.append("{");
		String label = String.valueOf(attrList.remove(attrList.size() - 1));
		for (int i = 0; i < attrList.size(); i++) {
			sb.append(attrList.get(i)).append(" 1, ");
		}
		sb.append(attrMap.size()).append(" ").append(label).append("}");
		return sb.toString();
	}
	
	private void printArffMetaData(PrintWriter pw) {
		pw.println("@RELATION malware\n");
		
		for (Map.Entry<String, Integer> entry : attrMap.entrySet()) {
			pw.println("@ATTRIBUTE "+entry.getKey()+"  NUMERIC");
		}
		pw.println("@ATTRIBUTE family {1,2,3,4,5,6,7,8,9}\n");
		pw.println("\n@DATA");
	}
	
	public void create() throws FileNotFoundException, UnsupportedEncodingException {
		PrintWriter pw = new PrintWriter(outFilePath, "UTF-8");
		printArffMetaData(pw);
		
		for (String asmFile : getAsmFileList()) {
			ArrayList<Integer> attrList = createAttrList(asmDirPath+asmFile);
			String arffRow = attrListToString(attrList);
			pw.println(arffRow);
		}
		
		pw.close();
	}
	
	
	public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
		String masterAttrList = "/home/patrrand/machine-learning/malware-classification/train-attr-list.txt";
		String asmAttrDir = "/home/patrrand/machine-learning/malware-classification/output/";
		String outputArff = "/home/patrrand/machine-learning/malware-classification/malware.arff";
		
		ArffConverter ac = new ArffConverter(masterAttrList, asmAttrDir, outputArff);
		ac.create();
	}

}
