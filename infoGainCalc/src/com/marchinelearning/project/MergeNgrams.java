package com.marchinelearning.project;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;

public class MergeNgrams {
	public static PriorityQueue<Node> heap;
	public static List<Scanner> files;
	
	public static class Node implements Comparable<Node> {
		String ngram;
		int index;
		
		public Node (String ngram, int index) {
			this.ngram = ngram;
			this.index = index;
		}

		@Override
		public int compareTo(Node o) {
			return ngram.compareTo(o.ngram);
		}
		
		@Override
		public boolean equals(Object obj) {
			return ngram.equals(((Node)obj).ngram);
		} 
	}
	
	public static void initHeap() {
		files = new ArrayList<Scanner>();
		heap = new PriorityQueue<Node>(10854);
		
		Scanner in;
		int i = -1;
				
		try {
			in = new Scanner(new File(Constants.trainLabelsFilename));
			in.nextLine();
			
			while(in.hasNext()) {
				String[] lineParts = in.nextLine().split(",");
				String id = lineParts[0].replace("\"", "");
				
				File file = new File(Constants.path + id + Constants.ngramsTrainingExampleSuffix);
				
				if (file.exists()) {
					i++;
					Scanner sc = new Scanner(file); 
					files.add(sc);
					
					scanInsertNewNgram(sc, i);
				}
			}
			
			in.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void scanInsertNewNgram(Scanner sc, int indexFile) {
		boolean newlyAdded = false;
		
		while (sc.hasNext() && !newlyAdded) {
			String line = sc.nextLine();						
			String ngram = line.substring(0, 11).replace(" ", "");
			Node node = new Node(ngram, indexFile); 
			
			if (!heap.contains(node)) {
				heap.add(node);
				newlyAdded = true;
			}
		}
	}
	
	public static void merge() {
		Node node;
		Scanner sc;
		PrintWriter writer ;
		
		try {
			writer = new PrintWriter(Constants.ngramsListFilename);
			
			while (!heap.isEmpty()) {
				node = heap.poll();
				sc = files.get(node.index);		
				
				writer.println(node.ngram);
				
				scanInsertNewNgram(sc, node.index);
			}
			
			writer.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void run() {
		System.out.println("initializing heap...");
		
		initHeap();
		
		System.out.println("merging...");
		
		merge();
		
		System.out.println("done...");
	}
}
