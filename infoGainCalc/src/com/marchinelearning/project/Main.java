package com.marchinelearning.project;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

public class Main {
	static String path = "E:\\Documents\\Education\\FIU\\Grad\\CAP5610\\Project\\dataSample\\";
	static String ngramsListFilename = path + "-merged-04-ngrams-Alpha.txt",
			ngramsTrainingExampleSuffix = ".bytes-04-ngrams-Alpha.txt",
			trainLabelsFilename = path + "trainLabels.csv";
	
	static int numFamilies = 9;
	static int[] familyOccurrences;
	static int[] exampleCurrentIndex;
	
	static String[] top500Ngrams;
	static double[] top500InfoGain;
	static HashMap<Integer, List<String>> familyTrainingMap;
	
	public static void calcFamilyOccurrences () {
		familyTrainingMap = new HashMap<Integer, List<String>>();
		familyOccurrences = new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0};
		
		Scanner in;
		try {
			in = new Scanner(new File(trainLabelsFilename));
			in.nextLine();
			while(in.hasNext()) {
				String[] lineParts = in.nextLine().split(",");
				int family = Integer.parseInt(lineParts[1]);
				String id = lineParts[0].replace("\"", "");
				
				familyOccurrences[family-1]++;
				
				if (!familyTrainingMap.containsKey(family)) {
					familyTrainingMap.put(family, new ArrayList<String>());
				}
				
				familyTrainingMap.get(family).add(id);
			}
			
			in.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void calcInfoGain() {
		top500Ngrams = new String[500];
		top500InfoGain = new double[500];
		
		int totalTrainingData = 1541 + 2478 + 2942 + 475 + 42 + 751 + 398 + 1228 + 1013;
		exampleCurrentIndex = new int[totalTrainingData];
		
		Arrays.fill(top500Ngrams, "");
		Arrays.fill(top500InfoGain, 0);
		Arrays.fill(exampleCurrentIndex, 0);
		
		Scanner completeNgramsListFile;
		Scanner ngramsListFile;
		
		String ngramIterator;
		
		double infoGain;
		double PV0, PV1;
		double[] PC = new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0};
		double[] PV0C = new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0};
		double[] PV1C = new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0};
		
		int ngramCountInFamily;
		int ngramCountInData;
		int ngramIndex = -1;
		
		try {
			completeNgramsListFile = new Scanner(new File(ngramsListFilename));
			completeNgramsListFile.nextLine();
			
			while(completeNgramsListFile.hasNext()) {
				ngramIndex++;
				
				String line = completeNgramsListFile.nextLine();
				String[] lineParts = line.split(" ");
				
				String ngram = lineParts[0] + lineParts[1] + lineParts[2] + lineParts[3];
				infoGain = 0;
				ngramCountInData = 0;
				PV0 = 0;
				PV1 = 0;
				
				for (int i = 0; i < numFamilies; i++) {
					List<String> malwaresInFamily = familyTrainingMap.get(i);
					ngramCountInFamily = 0;
					
					for (String malwareId : malwaresInFamily) {
						ngramsListFile = new Scanner(new File(path + malwareId + ngramsTrainingExampleSuffix));
						ngramIterator = ""; 		
						
						while (ngramIterator.compareTo(ngram) < 0 && ngramsListFile.hasNext()) {
							line = completeNgramsListFile.nextLine();
							lineParts = line.split(" ");
							ngramIterator = lineParts[0] + lineParts[1] + lineParts[2] + lineParts[3];
							
							if (ngramIterator.equals(ngram)) {
								ngramCountInFamily++;
							}
						}
						
						ngramsListFile.close();
					}	
					
					PV1C[i] = ngramCountInFamily / familyOccurrences[i];
					PV0C[i] = 1 - PV1C[i];
					PC[i] = familyOccurrences[i] / totalTrainingData;
					
					ngramCountInData += ngramCountInFamily;
				}
				
				PV1 = ngramCountInData / totalTrainingData;
				PV0 = 1 - PV1;
				
				for (int i = 0; i < numFamilies; i++) {
					infoGain += PV0C[i] * (Math.log(PV0C[i] / (PV0 * PC[i])) / Math.log(2));
					infoGain += PV1C[i] * (Math.log(PV1C[i] / (PV1 * PC[i])) / Math.log(2));
				}
				
				if (ngramIndex < 500) {
					top500Ngrams[ngramIndex] = ngram;
					top500InfoGain[ngramIndex] = infoGain;
				}
				else {
					processNgramInfoGain(ngram, infoGain);
				}
			}
			
			completeNgramsListFile.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void processNgramInfoGain(String ngram, double infoGain) {
		double minInfoGain = top500InfoGain[0];
		int minInfoGainIndex = 0;
		
		for (int i = 1; i < 500; i++) {
			if (minInfoGain > top500InfoGain[i]) {
				minInfoGain = top500InfoGain[i];
				minInfoGainIndex = i;
			}
		}
		
		if (minInfoGain < infoGain) {
			top500InfoGain[minInfoGainIndex] = infoGain;
			top500Ngrams[minInfoGainIndex] = ngram;
		}
	}
	
	public static void main(String[] args) {		
		calcFamilyOccurrences();
		
		calcInfoGain();
	}
}
