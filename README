#README
proc-asm 
Goal:   takes in a directory of training examples, extracts each file's most common library functions,
        and outputs these attributes to a new file (same .asm name, different directory). 
        Also, this command map a given input .asm file to its matching line in trainLabels.csv, and
        appends the class-label as the final attribute in the new .asm file of attributes.


$ ./proc-asm.sh <directory-of-training-examples> <trainLabels.csv> <output-directory>

Parameters:
$1 : directory where training examples are located
$2 : path to trainLabels.csv
$3 : directory where the output files should go 

Example usage:

$ ./proc-asm.sh ~/data/train/ ~/data/trainLabels.csv ~/data/output/


After running this (takes ~15 mins for all 10,000 .asm training examples), 
run ./merge-attr.sh with <output-directory> as one of the input parameters...


-------------------------------------------------------------------------------

merge-attr
Goal:   takes in the output directory from proc-asm, and merges all of the most
        common attributes into a new attribute list file. 

$ ./merge-attr.sh <directory-of-training-attribute-lists> <master-attribute-list>

Parameters:
$1 : directory where the output-files from proc-asm.sh are located.
$2 : the file name of the master attribute list 

Example usage:

$ ./merge-attr.sh ~/data/output/ ~/data/train-attr-list.txt


After running this, (~5 seconds), then you can convert all of the attribute lists
into an ARFF file for Weka using ArffConverter.java .

ArffConverter takes in 3 parameters: 
- the directory where all of the .asm attribute files are (i.e. ~/data/output)
- the path to the master attribute list (i.e. ~/data/train-attr-list.txt)
- the name of the output ARFF file (i.e. ~/data/malware.arff)




